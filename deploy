#!/bin/bash
set -e # exit with nonzero exit code if anything fails

if [ "$TRAVIS_PULL_REQUEST" != "false" ]
then
    echo "Pull Request, no need to deploy"
    exit 0
fi

# clear and re-create the out directory
rm -rf out || exit 0;

if [ "$TRAVIS_BRANCH" != "release" ]
then
    git fetch origin release:release
fi
git checkout release

scss _scss/main.scss:css/main.css
mkdir out
cp -r js/ css/ font/ index.html favicon.png out/

if [ "$TRAVIS_BRANCH" != "master" ]
then
    git fetch origin master:master
fi
git checkout master

scss _scss/main.scss:css/main.css
mkdir out/beta
cp -r js/ css/ font/ index.html favicon.png out/beta

# go to the out directory and create a *new* Git repo
cd out
git init

# inside this git repo we'll pretend to be a new user
git config user.name "Travis CI"
git config user.email "mudeshi1209@gmail.com"

# The first and only commit to this new Git repo contains all the
# files present with the commit message "Deploy to GitHub Pages".
git add .
git commit -m "Deploy to GitHub Pages"

# Force push from the current repo's master branch to the remote
# repo's gh-pages branch. (All previous history on the gh-pages branch
# will be lost, since we are overwriting it.) We redirect any output to
# /dev/null to hide any sensitive credential data that might otherwise be exposed.
git push --force --quiet "https://${GH_TOKEN}@${GH_REF}" master:gh-pages > /dev/null 2>&1
